Keywords:
    START -> Start State
    HALT -> Stop State
    STATE -> keyword to define a State
    LOOP -> keyword to define a Loop
    STATEMENT -> keyword to define a Statement

Structure of Statement:
    S -> STATEMENT (characterRead,replacingCharacter,direction) -> stateName;
    characterRead -> a-z | 0-9 | / | $ | *
    replacingCharacter -> a-z | 0-9 | / | $ | *
    direction -> l | r
    stateName -> digit | START | HALT
    digit -> 1-9D | 0-9
    D -> DD | 0-9

Structure of Loop:
    S -> LOOP {A}
    A -> AA | STATEMENT

Structure of State:
    S -> STATE stateName {A} | STATE stateName INSERT character -> stateName | STATE stateName DELETE -> stateName | STATE HALT {}
    stateName -> digit | START
    digit -> 1-9D | 0-9
    D -> DD | 0-9
    A -> AA | LOOP | STATEMENT
    character -> a-z | 0-9 | / | $ | *

Language Rules:
    -> HALT state should not have any statements, that is, should be empty.
    -> Each state, other than HALT state, must have atleast one STATEMENT showing transition to another state, that is, statement outside loop.
    -> The STATEMENT outside LOOP should not have stateName same as the state containing it.
    -> stateName should be a valid stateName, that is, defined in the language.
    -> stateName of STATEMENT in LOOP sould be equal to the stateName of the state containing it.
